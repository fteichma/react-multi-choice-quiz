{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/ThankYou.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","answers","image","content","Question","props","className","QuestionCount","Array","total","map","x","i","counter","AnswerOption","type","name","checked","answerContent","answer","id","value","disabled","onChange","onAnswerSelected","src","answerImage","alt","width","htmlFor","Quiz","key","questionId","answerOptions","questionTotal","ThankYou","href","App","Component","constructor","super","this","state","answersCount","end","handleAnswerSelected","bind","componentDidMount","setState","event","setUserAnswer","currentTarget","length","setTimeout","setNextQuestion","renderQuiz","renderThankYou","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcbfdf41.chunk.js","sourcesContent":["var quizQuestions = [\n  {\n      question: \"Premier petit exemple : Quel type de protection utilisez-vous ?\",\n      answers: [\n          {\n              image: \"https://image.flaticon.com/icons/svg/3165/3165197.svg\",\n              content: \"Masque non-réutilisable\"\n          },\n          {\n              image: \"https://image.flaticon.com/icons/svg/3165/3165307.svg\",\n              content: \"Masque réutilisable\"\n          },\n          {\n              image : \"https://image.flaticon.com/icons/svg/3165/3165201.svg\",\n              content: \"Visière de protection\"\n          }\n      ]\n  },\n  {\n      question: \"Quelle solution utilisez-vous pour gardez vos mains propres ?\",\n      answers: [\n          {\n              image : \"https://image.flaticon.com/icons/svg/3165/3165257.svg\",\n              content: \"Savon traditionnelle\"\n          },\n          {\n            image: \"https://image.flaticon.com/icons/svg/3165/3165219.svg\",\n              content: \"Gel hydroalcoolique\"\n          }\n      ]\n  },\n  {\n      question: \"Je suis un exemple.\",\n      answers: [\n          {\n              image : \"https://image.flaticon.com/icons/svg/3165/3165245.svg\",\n              content: \"Je suis un test\"\n          }\n      ]\n  }\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n  return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n    {[...Array(props.total)].map((x, i) => {\n    return(\n      <span className={`questionDot ${i+1 <= props.counter ? `active` : ``}`}/>\n      )})}\n    </div>\n  ); \n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n  return (\n    <li className=\"answerOption\">\n      <input\n        type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerContent === props.answer}\n        id={props.answerContent}\n        value={props.answerContent}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected}\n      />\n      <img src={props.answerImage} className=\"answerImage\" alt=\"Answer\" width=\"50%\"/>\n      <label className=\"radioCustomLabel\" htmlFor={props.answerContent}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerImage: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nfunction Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerImage={key.image}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <div key={props.questionId} className=\"questionContainer animate__animated animate__fadeInRight\">\n        <Question content={props.question} />\n        <ul className=\"answerOptions\">\n          {props.answerOptions.map(renderAnswerOptions)}\n        </ul>\n      </div>\n      <QuestionCount counter={props.questionId} total={props.questionTotal} />\n    </div>\n  );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\n\nfunction ThankYou() {\n  return (\n      <div className=\"thankYou\">\n        <h2>Merci pour votre participation !</h2>\n        <p>N'hésitez pas à me recontacter sur <a href=\"https://www.codeur.com/-fteichma\">Codeur.com</a></p>\n      </div>\n  );\n}\n\nexport default ThankYou;\n","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport ThankYou from './components/ThankYou';\nimport './App.css';\nimport \"animate.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      end: false\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: quizQuestions[0].answers\n    });\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setState({ end: true }), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1\n      },\n      answer: answer\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderThankYou() {\n    return <ThankYou />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.end ? this.renderThankYou() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}